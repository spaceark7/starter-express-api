{"level":"error","message":"Error: \nInvalid `prisma.user.findUnique()` invocation:\n\n{\n  where: {\n    AND: {\n      OR: [\n        {\n          email: \"Dudley18@hotmail.com\"\n        },\n        {\n          phone_number: \"084545424545\"\n        }\n      ]\n    },\n?   id?: Int,\n?   email?: String,\n?   phone_number?: String,\n?   OR?: UserWhereInput[],\n?   NOT?: UserWhereInput | UserWhereInput[],\n?   name?: StringNullableFilter | String | Null,\n?   password?: StringFilter | String,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime\n  }\n}\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id`, `email` or `phone_number` arguments. Available options are listed in green."}
{"level":"error","message":"Error: \nInvalid `prisma.user.findUnique()` invocation:\n\n{\n  where: {\n    OR: [\n      {\n        email: \"Dudley18@hotmail.com\"\n      },\n      {\n        phone_number: \"084545424545\"\n      }\n    ],\n?   id?: Int,\n?   email?: String,\n?   phone_number?: String,\n?   AND?: UserWhereInput | UserWhereInput[],\n?   NOT?: UserWhereInput | UserWhereInput[],\n?   name?: StringNullableFilter | String | Null,\n?   password?: StringFilter | String,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime\n  }\n}\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id`, `email` or `phone_number` arguments. Available options are listed in green."}
{"level":"error","message":"Error: \nInvalid `prisma.user.findUnique()` invocation:\n\n{\n  where: {\n    OR: [\n      {\n        email: \"Dudley18@hotmail.com\"\n      },\n      {\n        phone_number: \"084545424545\"\n      }\n    ],\n?   id?: Int,\n?   email?: String,\n?   phone_number?: String,\n?   AND?: UserWhereInput | UserWhereInput[],\n?   NOT?: UserWhereInput | UserWhereInput[],\n?   name?: StringNullableFilter | String | Null,\n?   password?: StringFilter | String,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime\n  }\n}\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id`, `email` or `phone_number` arguments. Available options are listed in green."}
{"level":"error","message":"Error: \nInvalid `prisma.user.findUnique()` invocation:\n\n{\n  where: {\n    OR: [\n      {\n        email: \"Dudley18@hotmail.com\"\n      },\n      {\n        phone_number: \"084545424545\"\n      }\n    ],\n?   id?: Int,\n?   email?: String,\n?   phone_number?: String,\n?   AND?: UserWhereInput | UserWhereInput[],\n?   NOT?: UserWhereInput | UserWhereInput[],\n?   name?: StringNullableFilter | String | Null,\n?   password?: StringFilter | String,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime\n  }\n}\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id`, `email` or `phone_number` arguments. Available options are listed in green."}
{"level":"error","message":"Error: \nInvalid `prisma.user.update()` invocation:\n\n{\n  where: {\n    id: undefined,\n?   email?: String,\n?   phone_number?: String,\n?   AND?: UserWhereInput | UserWhereInput[],\n?   OR?: UserWhereInput[],\n?   NOT?: UserWhereInput | UserWhereInput[],\n?   name?: StringNullableFilter | String | Null,\n?   password?: StringFilter | String,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime\n  },\n  data: {\n    password: \"$2b$10$pFlOlc6.cwdClAc0HRbRBeWoOyrhJ6Md3erOVFBCw4FKcTu/PJy5i\"\n  },\n  select: {\n    id: true\n  }\n}\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id`, `email` or `phone_number` arguments. Available options are listed in green."}
{"level":"error","message":"Error: \nInvalid `prisma.company.create()` invocation:\n\n{\n  data: {\n    name: \"Ziemann - Kovacek\",\n    tagline: \"contextually-based\",\n    address: {\n      create: {\n        street: \"7710 Malcolm Land\",\n        city: \"Burbank\",\n        province: \"Cambridgeshire\",\n        country: \"Israel\",\n        postal_code: \"48802-8587\",\n+       City: String\n      }\n    },\n    phone_number: \"0857323232323\",\n    email: \"Kaylie.Bayer@hotmail.com\",\n    website: \"fake-bay.name\"\n  }\n}\n\nArgument `City` is missing."}
{"level":"error","message":"Error: \nInvalid `prisma.company.create()` invocation:\n\n{\n  data: {\n    name: \"Ziemann - Kovacek\",\n    tagline: \"contextually-based\",\n    address: {\n      create: {\n        street: \"7710 Malcolm Land\",\n        City: \"Burbank\",\n        province: \"Cambridgeshire\",\n        country: \"Israel\",\n        postal_code: \"48802-8587\",\n+       Province: String\n      }\n    },\n    phone_number: \"0857323232323\",\n    email: \"Kaylie.Bayer@hotmail.com\",\n    website: \"fake-bay.name\"\n  }\n}\n\nArgument `Province` is missing."}
{"level":"error","message":"Error: \nInvalid `prisma.company.create()` invocation:\n\n{\n  data: {\n    name: \"Ziemann - Kovacek\",\n    tagline: \"contextually-based\",\n    address: {\n      create: {\n        street: \"7710 Malcolm Land\",\n        City: \"Burbank\",\n        province: \"Cambridgeshire\",\n        country: \"Israel\",\n        postal_code: \"48802-8587\",\n+       Province: String\n      }\n    },\n    phone_number: \"0857323232323\",\n    email: \"Kaylie.Bayer@hotmail.com\",\n    website: \"fake-bay.name\"\n  }\n}\n\nArgument `Province` is missing."}
{"level":"error","message":"Error: \nInvalid `prisma.company.create()` invocation:\n\n{\n  data: {\n    name: \"Ziemann - Kovacek\",\n    tagline: \"contextually-based\",\n    address: {\n      create: {\n        street: \"7710 Malcolm Land\",\n        City: \"Burbank\",\n        province: \"Cambridgeshire\",\n        country: \"Israel\",\n        postal_code: \"48802-8587\",\n+       city: String\n      }\n    },\n    phone_number: \"0857323232323\",\n    email: \"Kaylie.Bayer@hotmail.com\",\n    website: \"fake-bay.name\"\n  }\n}\n\nArgument `city` is missing."}
{"level":"error","message":"Error: \nInvalid `prisma.company.create()` invocation:\n\n{\n  data: {\n    name: \"Ziemann - Kovacek\",\n    tagline: \"contextually-based\",\n    address: {\n      create: {\n        street: \"7710 Malcolm Land\",\n        city: \"Burbank\",\n        province: \"Cambridgeshire\",\n        country: \"Israel\",\n        ~~~~~~~\n        postal_code: \"48802-8587\",\n?       createdAt?: DateTime,\n?       updatedAt?: DateTime\n      }\n    },\n    phone_number: \"0857323232323\",\n    email: \"Kaylie.Bayer@hotmail.com\",\n    website: \"fake-bay.name\"\n  }\n}\n\nUnknown argument `country`. Available options are listed in green."}
{"level":"error","message":"Error: \nInvalid `prisma.company.create()` invocation:\n\n{\n  data: {\n    name: \"Ziemann - Kovacek\",\n    tagline: \"contextually-based\",\n    address: {\n      create: {\n        street: \"7710 Malcolm Land\",\n        city: \"Burbank\",\n        province: \"Cambridgeshire\",\n        postal_code: \"48802-8587\"\n      }\n    },\n    phone_number: \"0857323232323\",\n    email: \"Kaylie.Bayer@hotmail.com\",\n    ~~~~~\n    website: \"fake-bay.name\",\n?   createdAt?: DateTime,\n?   updatedAt?: DateTime\n  }\n}\n\nUnknown argument `email`. Available options are listed in green."}
{"level":"error","message":"Error: \nInvalid `prisma.company.update()` invocation:\n\n{\n  data: {\n    name: \"Kling - Waters\",\n    tagline: \"Fundamental value-added analyzer\",\n    address: {\n      upsert: {\n        create: {\n          street: \"3929 Wolff Curve\",\n          city: \"Bartlett\",\n          province: \"Bedfordshire\",\n          country: \"Colombia\",\n          postal_code: \"12838\"\n        },\n        update: {\n          street: \"3929 Wolff Curve\",\n          city: \"Bartlett\",\n          province: \"Bedfordshire\",\n          country: \"Colombia\",\n          postal_code: \"12838\"\n        },\n+       where: {\n+         id: Int,\n+         AND: addressWhereInput | addressWhereInput[],\n+         OR: addressWhereInput[],\n+         NOT: addressWhereInput | addressWhereInput[],\n+         street: StringFilter | String,\n+         company_id: IntFilter | Int,\n+         city: StringFilter | String,\n+         province: StringFilter | String,\n+         postal_code: StringFilter | String,\n+         createdAt: DateTimeFilter | DateTime,\n+         updatedAt: DateTimeFilter | DateTime,\n+         company: CompanyRelationFilter | CompanyWhereInput\n+       }\n      }\n    },\n    phone_number: \"0857323232323\",\n    website: \"nonstop-chairman\"\n  }\n}\n\nArgument `where` is missing."}
{"level":"error","message":"Error: \nInvalid `prisma.company.update()` invocation:\n\n{\n  where: {\n    id: 1\n  },\n  data: {\n    name: \"Kling - Waters\",\n    tagline: \"Fundamental value-added analyzer\",\n    address: {\n      upsert: {\n        create: {\n          street: \"3929 Wolff Curve\",\n          city: \"Bartlett\",\n          province: \"Bedfordshire\",\n          country: \"Colombia\",\n          postal_code: \"12838\"\n        },\n        update: {\n          street: \"3929 Wolff Curve\",\n          city: \"Bartlett\",\n          province: \"Bedfordshire\",\n          country: \"Colombia\",\n          postal_code: \"12838\"\n        },\n+       where: {\n+         id: Int,\n+         AND: addressWhereInput | addressWhereInput[],\n+         OR: addressWhereInput[],\n+         NOT: addressWhereInput | addressWhereInput[],\n+         street: StringFilter | String,\n+         company_id: IntFilter | Int,\n+         city: StringFilter | String,\n+         province: StringFilter | String,\n+         postal_code: StringFilter | String,\n+         createdAt: DateTimeFilter | DateTime,\n+         updatedAt: DateTimeFilter | DateTime,\n+         company: CompanyRelationFilter | CompanyWhereInput\n+       }\n      }\n    },\n    phone_number: \"0857323232323\",\n    website: \"nonstop-chairman\"\n  }\n}\n\nArgument `where` is missing."}
{"level":"error","message":"Error: \nInvalid `prisma.company.update()` invocation:\n\n{\n  where: {\n    id: 1\n  },\n  data: {\n    name: \"Kling - Waters\",\n    tagline: \"Fundamental value-added analyzer\",\n    address: {\n      upsert: {\n        create: {\n          street: \"3929 Wolff Curve\",\n          city: \"Bartlett\",\n          province: \"Bedfordshire\",\n          country: \"Colombia\",\n          postal_code: \"12838\"\n        },\n        update: {\n          street: \"3929 Wolff Curve\",\n          city: \"Bartlett\",\n          province: \"Bedfordshire\",\n          country: \"Colombia\",\n          postal_code: \"12838\"\n        },\n+       where: {\n+         id: Int,\n+         AND: addressWhereInput | addressWhereInput[],\n+         OR: addressWhereInput[],\n+         NOT: addressWhereInput | addressWhereInput[],\n+         street: StringFilter | String,\n+         company_id: IntFilter | Int,\n+         city: StringFilter | String,\n+         province: StringFilter | String,\n+         postal_code: StringFilter | String,\n+         createdAt: DateTimeFilter | DateTime,\n+         updatedAt: DateTimeFilter | DateTime,\n+         company: CompanyRelationFilter | CompanyWhereInput\n+       }\n      }\n    },\n    phone_number: \"0857323232323\",\n    website: \"nonstop-chairman\"\n  }\n}\n\nArgument `where` is missing."}
{"level":"error","message":"Error: \nInvalid `prisma.company.update()` invocation:\n\n{\n  where: {\n    id: 1\n  },\n  data: {\n    name: \"Kling - Waters\",\n    tagline: \"Fundamental value-added analyzer\",\n    address: {\n      upsert: {\n        where: {\n          id: 1\n        },\n        create: {\n          street: \"3929 Wolff Curve\",\n          city: \"Bartlett\",\n          province: \"Bedfordshire\",\n          country: \"Colombia\",\n          ~~~~~~~\n          postal_code: \"12838\",\n?         createdAt?: DateTime,\n?         updatedAt?: DateTime\n        },\n        update: {\n          street: \"3929 Wolff Curve\",\n          city: \"Bartlett\",\n          province: \"Bedfordshire\",\n          country: \"Colombia\",\n          postal_code: \"12838\"\n        }\n      }\n    },\n    phone_number: \"0857323232323\",\n    website: \"nonstop-chairman\"\n  }\n}\n\nUnknown argument `country`. Available options are listed in green."}
{"level":"error","message":"Error: \nInvalid `prisma.product.findMany()` invocation:\n\n{\n  select: {\n    id: true,\n    name: true,\n    specification: true,\n    ~~~~~~~~~~~~~\n    price: true,\n    unit: true,\n    createdAt: true,\n?   spesification?: true,\n?   updatedAt?: true\n  }\n}\n\nUnknown field `specification` for select statement on model `Product`. Available options are listed in green."}
{"level":"error","message":"Error: \nInvalid `prisma.product.findMany()` invocation:\n\n{\n  select: {\n    id: true,\n    name: true,\n    specification: true,\n    ~~~~~~~~~~~~~\n    price: true,\n    unit: true,\n    createdAt: true,\n?   spesification?: true,\n?   updatedAt?: true\n  }\n}\n\nUnknown field `specification` for select statement on model `Product`. Available options are listed in green."}
{"level":"error","message":"Error: \nInvalid `prisma.product.create()` invocation:\n\n{\n  data: {\n    name: \"Electronic Steel Mouse\",\n    specification: \"Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals\",\n    ~~~~~~~~~~~~~\n    price: 187,\n    unit: \"[object Object]\",\n?   spesification?: String | Null,\n?   createdAt?: DateTime,\n?   updatedAt?: DateTime\n  },\n  select: {\n    id: true,\n    name: true,\n    specification: true,\n    price: true,\n    unit: true,\n    createdAt: true\n  }\n}\n\nUnknown argument `specification`. Did you mean `spesification`? Available options are listed in green."}
{"level":"error","message":"Error: \nInvalid `prisma.product.create()` invocation:\n\n{\n  data: {\n    name: \"Electronic Steel Mouse\",\n    spesification: \"Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals\",\n    price: 187,\n    unit: \"[object Object]\"\n  },\n  select: {\n    id: true,\n    name: true,\n    specification: true,\n    ~~~~~~~~~~~~~\n    price: true,\n    unit: true,\n    createdAt: true,\n?   spesification?: true,\n?   updatedAt?: true\n  }\n}\n\nUnknown field `specification` for select statement on model `Product`. Available options are listed in green."}
{"level":"error","message":"Error: \nInvalid `prisma.product.findUnique()` invocation:\n\n{\n  where: {\n    id: \"1\"\n        ~~~\n  },\n  select: {\n    id: true,\n    name: true,\n    specification: true,\n    price: true,\n    unit: true,\n    createdAt: true\n  }\n}\n\nArgument `id`: Invalid value provided. Expected Int, provided String."}
{"level":"error","message":"Error: \nInvalid `prisma.product.findUnique()` invocation:\n\n{\n  where: {\n    id: 1\n  },\n  select: {\n    id: true,\n    name: true,\n    specification: true,\n    ~~~~~~~~~~~~~\n    price: true,\n    unit: true,\n    createdAt: true,\n?   spesification?: true,\n?   updatedAt?: true\n  }\n}\n\nUnknown field `specification` for select statement on model `Product`. Available options are listed in green."}
{"level":"error","message":"Error: \nInvalid `prisma.product.update()` invocation:\n\n{\n  where: {\n    id: \"1\"\n  },\n  data: {\n    name: \"Modern Soft Towels\",\n    specification: \"The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J\",\n    ~~~~~~~~~~~~~\n    price: 924,\n    unit: \"[object Object]\",\n?   spesification?: String | NullableStringFieldUpdateOperationsInput | Null,\n?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n?   updatedAt?: DateTime | DateTimeFieldUpdateOperationsInput\n  },\n  select: {\n    id: true,\n    name: true,\n    specification: true,\n    price: true,\n    unit: true,\n    updatedAt: true\n  }\n}\n\nUnknown argument `specification`. Did you mean `spesification`? Available options are listed in green."}
{"level":"error","message":"Error: \nInvalid `prisma.product.update()` invocation:\n\n{\n  where: {\n    id: 1\n  },\n  data: {\n    name: \"Modern Soft Towels\",\n    spesification: \"The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J\",\n    price: 924,\n    unit: \"[object Object]\"\n  },\n  select: {\n    id: true,\n    name: true,\n    specification: true,\n    ~~~~~~~~~~~~~\n    price: true,\n    unit: true,\n    updatedAt: true,\n?   spesification?: true,\n?   createdAt?: true\n  }\n}\n\nUnknown field `specification` for select statement on model `Product`. Available options are listed in green."}
{"level":"error","message":"Error: \nInvalid `prisma.product.update()` invocation:\n\n\nUnique constraint failed on the (not available)"}
{"level":"error","message":"Error: \nInvalid `prisma.product.update()` invocation:\n\n\nAn operation failed because it depends on one or more records that were required but not found. Record to update not found."}
{"level":"error","message":"Error: \nInvalid `prisma.product.update()` invocation:\n\n\nAn operation failed because it depends on one or more records that were required but not found. Record to update not found."}
{"level":"error","message":"Error: \nInvalid `prisma.product.update()` invocation:\n\n\nAn operation failed because it depends on one or more records that were required but not found. Record to update not found."}
{"level":"error","message":"Error: \nInvalid `prisma.product.update()` invocation:\n\n\nAn operation failed because it depends on one or more records that were required but not found. Record to update not found."}
{"level":"error","message":"Error: \nInvalid `prisma.product.update()` invocation:\n\n\nAn operation failed because it depends on one or more records that were required but not found. Record to update not found."}
{"level":"error","message":"Error: \nInvalid `prisma.product.update()` invocation:\n\n\nUnique constraint failed on the (not available)"}
{"level":"error","message":"Error: \nInvalid `prisma.product.update()` invocation:\n\n\nAn operation failed because it depends on one or more records that were required but not found. Record to update not found."}
{"level":"error","message":"Error: \nInvalid `prisma.product.update()` invocation:\n\n\nAn operation failed because it depends on one or more records that were required but not found. Record to update not found."}
{"level":"error","message":"Error: \nInvalid `prisma.product.update()` invocation:\n\n\nUnique constraint failed on the (not available)"}
{"level":"error","message":"Error: \nInvalid `prisma.product.delete()` invocation:\n\n{\n  where: {\n    id: \"2\"\n        ~~~\n  }\n}\n\nArgument `id`: Invalid value provided. Expected Int, provided String."}

{"level":"error","message":"Error: \nInvalid `prisma.company.create()` invocation:\n\n\nThe provided value for the column is too long for the column's type. Column: for"}
{"level":"error","message":"Error: \nInvalid `prisma.company.create()` invocation:\n\n\nThe provided value for the column is too long for the column's type. Column: for"}
{"level":"error","message":"Error: \nInvalid `prisma.company.create()` invocation:\n\n\nThe provided value for the column is too long for the column's type. Column: for"}
{"level":"error","message":"Error: \nInvalid `prisma.company.create()` invocation:\n\n\nThe provided value for the column is too long for the column's type. Column: for"}
{"level":"error","message":"Error: \nInvalid `prisma.company.create()` invocation:\n\n\nThe provided value for the column is too long for the column's type. Column: for"}
{"level":"error","message":"Error: \nInvalid `prisma.company.create()` invocation:\n\n\nThe provided value for the column is too long for the column's type. Column: for"}
{"level":"error","message":"Error: \nInvalid `prisma.company.create()` invocation:\n\n\nThe provided value for the column is too long for the column's type. Column: for"}
{"level":"error","message":"Error: \nInvalid `prisma.company.create()` invocation:\n\n\nThe provided value for the column is too long for the column's type. Column: for"}
{"level":"error","message":"Error: \nInvalid `prisma.company.create()` invocation:\n\n{\n  data: {\n    name: \"PT Yubi technology\",\n    tagline: \"Tes\",\n    address: {\n      create: {\n        street: \"Jalan \",\n        city: \"Kota \",\n        province: \"Tes\",\n        postal_code: \"14240\"\n      }\n    },\n    logo: \"https://firebasestorage.googleapis.com/v0/b/react-native-storage-quiko.appspot.com/o/quiko-assets%2F9832c4b9-fdec-4fc8-a5c0-a48e3f47d480.jpeg?alt=media&token=6fef8eb5-5ba3-4955-872c-4f0dc7dbaacb\",\n    ~~~~\n    phone_number: \"08575555566\",\n    website: \"Trs\",\n?   createdAt?: DateTime,\n?   updatedAt?: DateTime\n  }\n}\n\nUnknown argument `logo`. Available options are listed in green."}
{"level":"error","message":"Error: \nInvalid `prisma.company.create()` invocation:\n\n{\n  data: {\n    name: \"PT Yubi technology\",\n    tagline: \"Tes\",\n    address: {\n      create: {\n        street: \"Jalan \",\n        city: \"Kota \",\n        province: \"Tes\",\n        postal_code: \"14240\"\n      }\n    },\n    logo: \"https://firebasestorage.googleapis.com/v0/b/react-native-storage-quiko.appspot.com/o/quiko-assets%2F9832c4b9-fdec-4fc8-a5c0-a48e3f47d480.jpeg?alt=media&token=4f705ced-6f50-4fa1-8204-d546ea410067\",\n    ~~~~\n    phone_number: \"08575555566\",\n    website: \"Trs\",\n?   createdAt?: DateTime,\n?   updatedAt?: DateTime\n  }\n}\n\nUnknown argument `logo`. Available options are listed in green."}
{"level":"error","message":"Error: \nInvalid `prisma.company.create()` invocation:\n\n{\n  data: {\n    name: \"PT Yubi technology\",\n    tagline: \"Tes\",\n    address: {\n      create: {\n        street: \"Jalan \",\n        city: \"Kota \",\n        province: \"Tes\",\n        postal_code: \"14240\"\n      }\n    },\n    logo: \"https://firebasestorage.googleapis.com/v0/b/react-native-storage-quiko.appspot.com/o/quiko-assets%2F9832c4b9-fdec-4fc8-a5c0-a48e3f47d480.jpeg?alt=media&token=17468f7d-6b6f-4fea-880e-d4a71d990814\",\n    ~~~~\n    phone_number: \"08575555566\",\n    website: \"Trs\",\n?   createdAt?: DateTime,\n?   updatedAt?: DateTime\n  }\n}\n\nUnknown argument `logo`. Available options are listed in green."}
{"level":"error","message":"Error: \nInvalid `prisma.company.create()` invocation:\n\n{\n  data: {\n    name: \"PT Yubi technology\",\n    tagline: \"Tes\",\n    address: {\n      create: {\n        street: \"Jalan \",\n        city: \"Kota \",\n        province: \"Tes\",\n        postal_code: \"14240\"\n      }\n    },\n    logo: \"https://firebasestorage.googleapis.com/v0/b/react-native-storage-quiko.appspot.com/o/quiko-assets%2F9832c4b9-fdec-4fc8-a5c0-a48e3f47d480.jpeg?alt=media&token=a8c16389-3ed4-42c7-b065-91841ce9c305\",\n    ~~~~\n    phone_number: \"08575555566\",\n    website: \"Trs\",\n?   createdAt?: DateTime,\n?   updatedAt?: DateTime\n  }\n}\n\nUnknown argument `logo`. Available options are listed in green."}
{"level":"error","message":"Error: \nInvalid `prisma.company.update()` invocation:\n\n{\n  where: {\n    id: 4\n  },\n  data: {\n    name: \"Badroh corp 3g\",\n    tagline: \"Test\",\n    address: {\n      upsert: {\n        where: {\n          company_id: 4,\n?         id?: Int,\n?         AND?: addressWhereInput | addressWhereInput[],\n?         OR?: addressWhereInput[],\n?         NOT?: addressWhereInput | addressWhereInput[],\n?         street?: StringFilter | String,\n?         city?: StringFilter | String,\n?         province?: StringFilter | String,\n?         postal_code?: StringNullableFilter | String | Null,\n?         createdAt?: DateTimeFilter | DateTime,\n?         updatedAt?: DateTimeFilter | DateTime,\n?         company?: CompanyNullableRelationFilter | CompanyWhereInput | Null\n        },\n        create: {\n          street: \"Jalan\",\n          city: \"Kota\",\n          province: \"Provinsi \",\n          postal_code: \"14240\"\n        },\n        update: {\n          street: \"Jalan\",\n          city: \"Kota\",\n          province: \"Provinsi \",\n          postal_code: \"14240\"\n        }\n      }\n    },\n    phone_number: \"02122452092\",\n    website: \"Test\"\n  }\n}\n\nArgument `where` of type addressWhereUniqueInput needs at least one of `id` arguments. Available options are listed in green."}
{"level":"error","message":"Error: \nInvalid `prisma.company.update()` invocation:\n\n{\n  where: {\n    id: 4\n  },\n  data: {\n    name: \"Badroh corp 3g\",\n    tagline: \"Test\",\n    address: {\n      upsert: {\n        where: {\n          company_id: 4,\n?         id?: Int,\n?         AND?: addressWhereInput | addressWhereInput[],\n?         OR?: addressWhereInput[],\n?         NOT?: addressWhereInput | addressWhereInput[],\n?         street?: StringFilter | String,\n?         city?: StringFilter | String,\n?         province?: StringFilter | String,\n?         postal_code?: StringNullableFilter | String | Null,\n?         createdAt?: DateTimeFilter | DateTime,\n?         updatedAt?: DateTimeFilter | DateTime,\n?         company?: CompanyNullableRelationFilter | CompanyWhereInput | Null\n        },\n        create: {\n          street: \"Jalan\",\n          city: \"Kota\",\n          province: \"Provinsi \",\n          postal_code: \"14240\"\n        },\n        update: {\n          street: \"Jalan\",\n          city: \"Kota\",\n          province: \"Provinsi \",\n          postal_code: \"14240\"\n        }\n      }\n    },\n    phone_number: \"02122452092\",\n    website: \"Test\"\n  }\n}\n\nArgument `where` of type addressWhereUniqueInput needs at least one of `id` arguments. Available options are listed in green."}
{"level":"error","message":"Error: \nInvalid `prisma.company.update()` invocation:\n\n{\n  where: {\n    id: 4\n  },\n  data: {\n    name: \"Badroh corp 3g\",\n    tagline: \"Test\",\n    address: {\n      upsert: {\n        where: {\n          company_id: 4,\n?         id?: Int,\n?         AND?: addressWhereInput | addressWhereInput[],\n?         OR?: addressWhereInput[],\n?         NOT?: addressWhereInput | addressWhereInput[],\n?         street?: StringFilter | String,\n?         city?: StringFilter | String,\n?         province?: StringFilter | String,\n?         postal_code?: StringNullableFilter | String | Null,\n?         createdAt?: DateTimeFilter | DateTime,\n?         updatedAt?: DateTimeFilter | DateTime,\n?         company?: CompanyNullableRelationFilter | CompanyWhereInput | Null\n        },\n        create: {\n          street: \"Jalan\",\n          city: \"Kota\",\n          province: \"Provinsi \",\n          postal_code: \"14240\"\n        },\n        update: {\n          street: \"Jalan\",\n          city: \"Kota\",\n          province: \"Provinsi \",\n          postal_code: \"14240\"\n        }\n      }\n    },\n    phone_number: \"02122452092\",\n    website: \"Test\"\n  }\n}\n\nArgument `where` of type addressWhereUniqueInput needs at least one of `id` arguments. Available options are listed in green."}
{"level":"error","message":"Error: \nInvalid `prisma.company.update()` invocation:\n\n{\n  where: {\n    id: 1\n  },\n  data: {\n    name: \"Testing w\",\n    tagline: \"Tester\",\n    address: {\n      upsert: {\n        where: {\n          company_id: 1,\n?         id?: Int,\n?         AND?: addressWhereInput | addressWhereInput[],\n?         OR?: addressWhereInput[],\n?         NOT?: addressWhereInput | addressWhereInput[],\n?         street?: StringFilter | String,\n?         city?: StringFilter | String,\n?         province?: StringFilter | String,\n?         postal_code?: StringNullableFilter | String | Null,\n?         createdAt?: DateTimeFilter | DateTime,\n?         updatedAt?: DateTimeFilter | DateTime,\n?         company?: CompanyNullableRelationFilter | CompanyWhereInput | Null\n        },\n        create: {\n          street: \"Jalan \",\n          city: \"Ki Joon \",\n          province: \"Provinsi \",\n          postal_code: \"14240\"\n        },\n        update: {\n          street: \"Jalan \",\n          city: \"Ki Joon \",\n          province: \"Provinsi \",\n          postal_code: \"14240\"\n        }\n      }\n    },\n    phone_number: \"08575425555\",\n    website: \"Tes\"\n  }\n}\n\nArgument `where` of type addressWhereUniqueInput needs at least one of `id` arguments. Available options are listed in green."}
{"level":"error","message":"Error: \nInvalid `prisma.company.create()` invocation:\n\n{\n  data: {\n    name: \"Tina\",\n    user_id: 5,\n    ~~~~~~~\n    tagline: \"Tes\",\n    address: {\n      create: {\n        street: \"Tes\",\n        city: \"Tes\",\n        province: \"Tes\",\n        postal_code: \"25555\"\n      }\n    },\n    logo: null,\n    phone_number: \"0857869999\",\n    website: \"Tes\",\n?   createdAt?: DateTime,\n?   updatedAt?: DateTime,\n?   user?: UserCreateNestedOneWithoutCompanyInput\n  }\n}\n\nUnknown argument `user_id`. Did you mean `user`? Available options are listed in green."}
{"level":"error","message":"Error: \nInvalid `prisma.company.create()` invocation:\n\n{\n  data: {\n    name: \"Tina\",\n    user_id: 5,\n    ~~~~~~~\n    tagline: \"Tes\",\n    address: {\n      create: {\n        street: \"Tes\",\n        city: \"Tes\",\n        province: \"Tes\",\n        postal_code: \"25555\"\n      }\n    },\n    logo: null,\n    phone_number: \"0857869999\",\n    website: \"Tes\",\n?   createdAt?: DateTime,\n?   updatedAt?: DateTime,\n?   user?: UserCreateNestedOneWithoutCompanyInput\n  }\n}\n\nUnknown argument `user_id`. Did you mean `user`? Available options are listed in green."}
{"level":"error","message":"Error: \nInvalid `prisma.company.update()` invocation:\n\n{\n  where: {\n    id: 1\n  },\n  data: {\n    name: \"Hanjawar corp 3\",\n    tagline: \"Kita bebas\",\n    address: {\n      update: {\n        where: {\n          id: 1\n        },\n        data: {\n          street: \"Jalan raya Hanjawar \",\n          city: \"Cipanas\",\n          province: \"Jawa Barat \",\n          postal_code: \"14240\"\n        }\n      }\n    },\n    phone_number: \"02158858845\",\n    logo: {\n      uri: \"https://firebasestorage.googleapis.com/v0/b/react-native-storage-quiko.appspot.com/o/quiko-assets%2Fdc38f305-2842-4bc0-a9ef-4b4becaa0677.jpeg?alt=media&token=49f09d6f-b893-4dca-b5ce-ac8a7a21399c\",\n      ~~~\n?     set?: String\n    },\n    website: \"Hzar.com\"\n  }\n}\n\nUnknown argument `uri`. Did you mean `set`? Available options are listed in green."}
{"level":"error","message":"Error: \nInvalid `prisma.user.findFirst()` invocation:\n\n\nCannot select both '$scalars: true' and a specific scalar field 'company'."}
{"level":"error","message":"Error: \nInvalid `prisma.user.findFirst()` invocation:\n\n\nCannot select both '$scalars: true' and a specific scalar field 'company'."}
{"level":"error","message":"Error: \nInvalid `prisma.user.findFirst()` invocation:\n\n\nCannot select both '$scalars: true' and a specific scalar field 'company'."}
{"level":"error","message":"Error: \nInvalid `prisma.user.findFirst()` invocation:\n\n\nCannot select both '$scalars: true' and a specific scalar field 'company'."}
{"level":"error","message":"Error: \nInvalid `prisma.user.findFirst()` invocation:\n\n\nCannot select both '$scalars: true' and a specific scalar field 'company'."}
{"level":"error","message":"Error: \nInvalid `prisma.user.findFirst()` invocation:\n\n\nCannot select both '$scalars: true' and a specific scalar field 'company'."}
{"level":"error","message":"Error: \nInvalid `prisma.user.findFirst()` invocation:\n\n\nCannot select both '$scalars: true' and a specific scalar field 'company'."}
{"level":"error","message":"Error: \nInvalid `prisma.company.create()` invocation:\n\n\nUnique constraint failed on the (not available)"}
{"level":"error","message":"Error: \nInvalid `prisma.product.createMany()` invocation:\n\n{\n  data: [\n    {\n      name: \"Admin\",\n      spesification: \"asd\",\n      price: 23000,\n      unit: \"Unit\"\n    },\n    {\n      name: \"asdasds\",\n      spesification: \"1221\",\n      price: 23333,\n      unit: \"Unit\"\n    }\n  ],\n  select: {\n    id: true,\n    ~~\n    name: true,\n    spesification: true,\n    price: true,\n    unit: true,\n    createdAt: true,\n?   count?: true\n  }\n}\n\nUnknown field `id` for select statement on model `AffectedRowsOutput`. Available options are listed in green."}
{"level":"error","message":"Error: \nInvalid `prisma.product.createMany()` invocation:\n\n{\n  data: [\n    {\n      name: \"Admin\",\n      spesification: \"asd\",\n      price: 23000,\n      unit: \"Unit\"\n    },\n    {\n      name: \"asdasds\",\n      spesification: \"1221\",\n      price: 23333,\n      unit: \"Unit\"\n    }\n  ],\n  select: {\n    id: true,\n    ~~\n    name: true,\n    spesification: true,\n    price: true,\n    unit: true,\n    createdAt: true,\n?   count?: true\n  }\n}\n\nUnknown field `id` for select statement on model `AffectedRowsOutput`. Available options are listed in green."}
{"level":"error","message":"Error: \nInvalid `prisma.product.createMany()` invocation:\n\n{\n  data: [\n    {\n      name: \"Admin\",\n      spesification: \"asd\",\n      price: 23000,\n      unit: \"Unit\"\n    },\n    {\n      name: \"asdasds\",\n      spesification: \"1221\",\n      price: 23333,\n      unit: \"Unit\"\n    }\n  ],\n  select: {\n    name: true,\n    ~~~~\n    spesification: true,\n    price: true,\n    unit: true,\n    createdAt: true,\n?   count?: true\n  }\n}\n\nUnknown field `name` for select statement on model `AffectedRowsOutput`. Available options are listed in green."}
