generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  phone_number String   @unique
  name         String?
  company      Company?
  password     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  order        Order[]


  @@map("users")
}

model Company {
  id           Int       @id @default(autoincrement())
  name         String
  tagline      String     
  user         User?      @relation(fields: [user_id], references: [id])
  user_id      Int?     @unique
  logo         String    @db.LongText
  phone_number String
  website      String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  address      address[]

  @@index([user_id])
  @@map("companies")
}

model BankAccount {
  id             Int           @id @default(autoincrement())
  bank_name      String
  account_name   String
  account_number String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  order_detail   OrderDetail[]

  @@map("bank_accounts")
}

model address {
  id          Int      @id @default(autoincrement())
  street      String
  company_id  Int
  city        String
  province    String
  postal_code String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     Company? @relation(fields: [company_id], references: [id])

  @@index([company_id])
  @@map("addresses")
}

model Customer {
  id           Int              @id @default(autoincrement())
  name         String
  phone_number String?
  email        String?
  address_id   Int?             @unique
  attention    String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  address      CustomerAddress? @relation(fields: [address_id], references: [id])
  order        Order[]

  @@index([address_id])
  @@map("customers")
}

model CustomerAddress {
  id          Int       @id @default(autoincrement())
  street      String
  city        String
  province    String
  postal_code String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  customer    Customer?

  @@map("costumer_addresses")
}

model Product {
  id            Int      @id @default(autoincrement())
  name          String   @unique
  spesification String?
  price         Float
  unit          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("products")
}

model Order {
  id            Int            @id @default(autoincrement())
  user_id       Int
  customer_id   Int
  valid_until   DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  status        String
  user          User?          @relation(fields: [user_id], references: [id])
  order_detail  OrderDetail?
  order_product OrderProduct[]
  customer      Customer?      @relation(fields: [customer_id], references: [id])

  @@index([customer_id])
  @@index([user_id])
  @@map("orders")
}

model OrderProduct {
  id           Int      @id @default(autoincrement())
  order_id     Int
  product_id   Int
  product_name String
  price        Float
  unit         String
  discount     Float
  qty          Int
  amount       Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  order        Order    @relation(fields: [order_id], references: [id])

  @@index([order_id])
  @@map("order_products")
}

model OrderDetail {
  id                 Int           @id @default(autoincrement())
  order_id           Int           @unique
  notes              String        @db.LongText
  customer_attention String?
  down_payment       Float?
  discount_amount    Float?
  total_amount       Float
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  order              Order         @relation(fields: [order_id], references: [id])
  bank_accounts      BankAccount[]

  @@index([order_id])
  @@map("order_details")
}

model BankAccountToOrderDetail {
  A Int
  B Int

  @@unique([A, B], map: "_BankAccountToOrderDetail_AB_unique")
  @@index([B], map: "_BankAccountToOrderDetail_B_index")
  @@map("_BankAccountToOrderDetail")
}
